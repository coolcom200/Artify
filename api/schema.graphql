scalar Upload

type File {
    filePath: String!
    fileName: String!
}

type Product {
    owner: User!
    productName: String!
    description: String!
    isVisible: Boolean!
    price: Float!
    uid: ID!
    images: [File!]!
}

type AuthResponse {
    message: String
}

type User {
    name: String!
    email: String!
    uid: ID!
    products: [Product!]!
}

type Query {
  search(searchQuery:String, minPrice: Float, maxPrice:Float): [Product!]!
  me: User!
}


input RegisterInput {
    name: String!
    email: String!
    password: String!
}

input LoginInput {
    email: String!
    password: String!
}

input CreateProductInput {
    productName: String!
    description: String!
    price: Float!
    isVisible: Boolean!
    files: [Upload!]!
}

type Mutation {
  logout: AuthResponse!
  login(input: LoginInput!): AuthResponse!
  register(input: RegisterInput!): AuthResponse!
  createProduct(input: CreateProductInput!): Product!
}

